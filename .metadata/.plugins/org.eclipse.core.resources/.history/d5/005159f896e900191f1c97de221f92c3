package com.mohit.springsecurity.demo.config;

import javax.sql.DataSource;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.authentication.dao.DaoAuthenticationProvider;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;

import com.mohit.springsecurity.demo.service.UserService;

@Configuration
@EnableWebSecurity
public class DemoSecurityConfig extends WebSecurityConfigurerAdapter {

	@Autowired
	private DataSource dataSource;
	
	@Autowired
    private UserService userService;
	
    
	
	@Override
	protected void configure(AuthenticationManagerBuilder auth) throws Exception {
		
		// Method 1: add users for in memory authentication
		
		auth.inMemoryAuthentication()
		.withUser("mohit").password("{noop}test").roles("EMPLOYEE");
		auth.inMemoryAuthentication().withUser("ambrish").password("{noop}test").roles("EMPLOYEE", "MANAGER");
		auth.inMemoryAuthentication().withUser("mukesh").password("{noop}test").roles("EMPLOYEE", "ADMIN");
		
		
		//Method 2:use jdbc users
		auth.jdbcAuthentication().dataSource(dataSource);
		
		
	}

	@Override
	protected void configure(HttpSecurity http) throws Exception {
		
		http.authorizeRequests()
		//Below are commented as it will allow anyone to login with any role access
		/*.anyRequest().authenticated().
		antMatchers("/").permitAll() //to allow public access
*/		.antMatchers("/").hasRole("EMPLOYEE")
		.antMatchers("/leaders/**").hasRole("MANAGER")
		.antMatchers("/admin/**").hasRole("ADMIN")
		.and()
		.formLogin().
		loginPage("/showMyLoginPage").loginProcessingUrl("/authenticateTheUser")
		.permitAll()
		.and().logout().permitAll()
		.and().exceptionHandling().accessDeniedPage("/access-denied");
	}

	
	
	
}
